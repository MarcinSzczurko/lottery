"""Module simulates eurojackpot lottery
"""
import random
from typing import Dict, List

import inquirer


def generate_pool(last_number: int, selections: int) -> Dict:
    """
    Generates dictionary with 2 information:
        - range of available numbers
        - number of selections

    Parameters
    ----------
    last_number : int
        The highest value from the pool
    selections : int
        How many numbers should be selected

    Returns
    -------
    Dict
        pool: List[int] - list of available numbers
        selections: int - number of selections
    """
    assert (
        last_number >= 1
    ), "You cannot create a pool with zero or negative numbers. Enter a positive value."
    assert (
        last_number >= selections
    ), f"You cannot select {selections} numbers from {last_number} numbers pool."

    pool = dict(pool=list(range(1, last_number + 1)), selections=selections)

    return pool


def choose_random(pool: Dict) -> Dict:
    """
    Random selection from a pool dictionary generated by generate_pool() function.
    List of drawn numbers is appended to the pool dictionary.

    Parameters
    ----------
    pool : Dict
        Pool dictionary generated by generate_pool() function

    Returns
    -------
    Dict
        Pool dictionary extended with drawn numbers
    """
    pool["chosen_numbers"] = random.sample(pool["pool"], pool["selections"])

    return pool


def choose_by_yourself(pool: Dict) -> Dict:
    """
    Multiple selection from a pool dictionary generated by generate_pool() function.
    To make a choose use keyboard.
        'Space' key - selecte/unselecte choices.
        'Enter' key - confirm choices.
    After confirmation, returned list of chosen numbers must equal
    to the number of 'selections' from the pool dictionary.
    List of chosen numbers is appended to the pool dictionary.

    Parameters
    ----------
    pool : Dict
        Pool dictionary generated by generate_pool() function

    Returns
    -------
    Dict
        Pool dictionary extended with chosen numbers
    """
    name = "lottery"
    message = f"Choose {pool['selections']} numbers from the range below. Press space to select/unselect values. Press enter to confirm choices."

    questions = [
        inquirer.Checkbox(
            name=name,
            message=message,
            choices=pool["pool"],
        ),
    ]
    answers = inquirer.prompt(questions)
    pool["chosen_numbers"] = answers[name]

    assert (
        len(pool["chosen_numbers"]) == pool["selections"]
    ), f"You've selected {len(pool['chosen_numbers'])} options. Please choose {pool['selections']}"

    return pool


def choose_numbers(pool_1: Dict, pool_2: Dict, method: str = "random") -> List[Dict]:
    """
    Selection of numbers participating in the lottery.

    There are 2 pools of numbers and from each, unique numbers are selected.
    Numbers can duplicate, but not within a single pool.
    After selection numbers are presented to the user.
    Then can decide if there is a need to choose numbers again or stay with current ones.
    During re-draw user can choose again method of the numbers selection.

    Parameters
    ----------
    pool_1 : Dict
        Pool dictionary generated by generate_pool() function
    pool_2 : Dict
        Pool dictionary generated by generate_pool() function
    method : str, optional
        If set to 'random' (default), then numbers are selected by random method.
        If set to 'own numbers', numbers are selected by the user:
            - multiple selection from the list of given choices.
            - with 'space' key on keyboard, choices are selected(unselected).
            - with 'enter' key on keyboard, choices are confirmed.

    Returns
    -------
    List[Dict, Dict]
        List of dictionaries participating in the lottery.
        Dictionaries store information about:
            pool: List[int] - list of available numbers in the pool
            selections: int - number of selections
            chosen_numbers: List[int] - numbers participating in the lottery
    """
    if method == "random":
        pool_1 = choose_random(pool_1)
        pool_2 = choose_random(pool_2)
    elif method == "own numbers":
        pool_1 = choose_by_yourself(pool_1)
        pool_2 = choose_by_yourself(pool_2)

    questions = [
        inquirer.List(
            name="satisfaction",
            message=f"These are your numbers {pool_1['chosen_numbers']}{pool_2['chosen_numbers']}. Are you satisfied with them?",
            choices=["Yes", "No"],
        ),
    ]
    answers = inquirer.prompt(questions)

    if answers["satisfaction"] == "No":
        questions = [
            inquirer.List(
                name="draw again",
                message="Choose your numbers again. Which method do you want to play?",
                choices=["random", "own numbers"],
            ),
        ]
        answers = inquirer.prompt(questions)

        choose_numbers(pool_1, pool_2, method=answers["draw again"])

    all_chosen_numbers = [pool_1, pool_2]

    return all_chosen_numbers


if __name__ == "__main__":
    pool_1 = generate_pool(50, 5)
    pool_2 = generate_pool(12, 2)
    choose_numbers(pool_1, pool_2)
