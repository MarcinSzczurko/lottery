"""Module simulates eurojackpot lottery
"""
import random
from typing import List, Dict
import inquirer

# numbers available during eurojackpot lottery
pool_of_numbers_1_to_50 = list(range(1,51))
pool_of_numbers_1_to_12 = list(range(1,13))


def generate_pool(last_number: int, selections: int) -> Dict:
    """
    Generates dictionary with 2 information:
        - range of available numbers
        - number of selections

    Parameters
    ----------
    last_number : int
        The highest value from the pool
    selections : int
        How many numbers should be selected

    Returns
    -------
    Dict
        pool: List[int] - list of available numbers
        selections: int - number of selections
    """
    assert last_number >= 1, "You cannot create a pool with zero or negative numbers. Enter a positive value."
    assert last_number >= selections, f"You cannot select {selections} numbers from {last_number} numbers pool."

    pool = dict(pool = list(range(1, last_number + 1)), selections = selections)

    return pool


def choose_random(pool: Dict) -> Dict:
    """
    Random selection from a pool dictionary generated by generate_pool() function.
    List of drawn numbers is appended to the pool dictionary.

    Parameters
    ----------
    pool : Dict
        Pool dictionary generated by generate_pool() function

    Returns
    -------
    Dict
        Pool dictionary extended with drawn numbers
    """
    pool['chosen_numbers'] = random.sample(pool['pool'], pool['selections'])

    return pool


def choose_by_yourself(pool: Dict) -> Dict:
    """
    Multiple selection from a pool dictionary generated by generate_pool() function.
    To make a choose use keyboard.
        'Space' key - selecte/unselecte choices.
        'Enter' key - confirm choices.
    After confirmation, returned list of chosen numbers must equal
    to the number of 'selections' from the pool dictionary.
    List of chosen numbers is appended to the pool dictionary.

    Parameters
    ----------
    pool : Dict
        Pool dictionary generated by generate_pool() function

    Returns
    -------
    Dict
        Pool dictionary extended with chosen numbers
    """
    name = "lottery"
    message = f"Choose {pool['selections']} numbers from the range below. Press space to select/unselect values. Press enter to confirm choices."

    questions = [
    inquirer.Checkbox(name=name,
                      message=message,
                      choices=pool['pool'],
                    ),
    ]
    answers = inquirer.prompt(questions)
    pool['chosen_numbers'] = answers[name]

    assert len(pool['chosen_numbers']) == pool['selections'], \
        f"You've selected {len(pool['chosen_numbers'])} options. Please choose {pool['selections']}"

    return pool


def choose_numbers(randomly: bool = True) -> List[int]:
    """
    Selection of numbers participating in the lottery.

    There are 2 pools of numbers and from each, unique numbers are selected.
    Numbers can duplicate, but not within a single pool.

    Pool 1: numbers from 1 to 50
    Pool 2: numbers from 1 to 12

    Parameters
    ----------
    randomly : bool, optional
        If set to True (default), then numbers are selected by random method.
        If set to False, numbers are selected by the user:
            - multiple selection from the list of given choices.
            - with 'space' key on keyboard, choices are selected(unselected).
            - with 'enter' key on keyboard, choices are confirmed.

    Returns
    -------
    List[int]
        List of chosen numbers
    """
    if randomly:
        chosen_numbers_pool_1 = random.sample(pool_of_numbers_1_to_50, k=5)
        chosen_numbers_pool_2 = random.sample(pool_of_numbers_1_to_12, k=2)
    else:
        chosen_numbers_pool_1 = choose_by_yourself(pool_of_numbers_1_to_50, 5)
        chosen_numbers_pool_2 = choose_by_yourself(pool_of_numbers_1_to_12, 2)

    all_chosen_numbers = chosen_numbers_pool_1 + chosen_numbers_pool_2

    return all_chosen_numbers
